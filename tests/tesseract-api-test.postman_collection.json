{
	"info": {
		"_postman_id": "40b08cc5-ad5e-464d-ac1b-e84a4950e28a",
		"name": "Tesseract Container Check",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35575748"
	},
	"item": [
		{
			"name": "Check Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Get the response JSON",
							"let response = pm.response.json();",
							"",
							"// Verify that the body has the key 'status'",
							"pm.test(\"Response has 'status' key\", function () {",
							"    pm.expect(response).to.have.property('status');",
							"});",
							"",
							"// Verify that the value of 'status' is 'healthy'",
							"pm.test(\"Status value is 'healthy'\", function () {",
							"    pm.expect(response.status).to.eql(\"healthy\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Analyze Document",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"// Extract task_id from the response and set it as an collection variable",
							"let response = pm.response.json();",
							"",
							"// Regular expression for UUID4 validation",
							"const uuid4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
							"",
							"// Check that the response contains 'task_id'",
							"pm.test(\"Response has 'task_id'\", function () {",
							"    pm.expect(response).to.have.property('task_id');",
							"});",
							"",
							"// Validate that 'task_id' is a UUID4",
							"pm.test(\"task_id is a valid UUID4\", function () {",
							"    pm.expect(response.task_id).to.match(uuid4Regex);",
							"});",
							"",
							"// Write task_id as collection variable to test the fetching of results",
							"let taskId = response.task_id;",
							"pm.collectionVariables.set(\"task_id\",taskId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set the body mode to form-data",
							"pm.request.body.mode = \"formdata\";",
							"",
							"// Get the variable value from the Postman collection",
							"let test_image = pm.collectionVariables.get(\"test_image\");",
							"",
							"// Set the form-data with the variable value for the file name",
							"pm.request.body.update({",
							"    mode: 'formdata',",
							"    formdata: [",
							"        {",
							"            key: 'file',",
							"            type: 'file',",
							"            src: test_image",
							"        }",
							"    ]",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{base_url}}/analyzeDocument",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"analyzeDocument"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Analyze Results",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Parse the response JSON",
							"let response = pm.response.json();",
							"",
							"// Function to re-run the request",
							"function rerunRequest() {",
							"    // Set a timeout to rerun the request after a delay (e.g., 3000 ms or 3 seconds)",
							"    setTimeout(function() {",
							"        pm.sendRequest(pm.request, function (err, res) {",
							"            // Handle the response of the re-run request",
							"            if (!err) {",
							"                // Re-parse the response JSON",
							"                response = res.json();",
							"",
							"                // Re-run the tests",
							"                pm.test(\"Status is 'completed'\", function () {",
							"                    pm.expect(response.status).to.eql(\"completed\");",
							"                });",
							"",
							"                pm.test(\"Width is not null and greater than 0\", function () {",
							"                    pm.expect(response.width).to.not.be.null;",
							"                    pm.expect(response.width).to.be.above(0);",
							"                });",
							"",
							"                pm.test(\"Height is not null and greater than 0\", function () {",
							"                    pm.expect(response.height).to.not.be.null;",
							"                    pm.expect(response.height).to.be.above(0);",
							"                });",
							"            }",
							"        });",
							"    }, 3000); // Adjust the delay as needed",
							"}",
							"",
							"// Check that the status is 'completed' or re-run the request if 'running'",
							"pm.test(\"Status is 'completed' or re-run if 'running'\", function () {",
							"    if (response.status === \"completed\") {",
							"        pm.expect(response.status).to.eql(\"completed\");",
							"",
							"        // Check that the width is not null and greater than 0",
							"        pm.test(\"Width is not null and greater than 0\", function () {",
							"            pm.expect(response.width).to.not.be.null;",
							"            pm.expect(response.width).to.be.above(0);",
							"        });",
							"",
							"        // Check that the height is not null and greater than 0",
							"        pm.test(\"Height is not null and greater than 0\", function () {",
							"            pm.expect(response.height).to.not.be.null;",
							"            pm.expect(response.height).to.be.above(0);",
							"        });",
							"    } else if (response.status === \"running\") {",
							"        rerunRequest(); // Re-run the request if the status is 'running'",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/analyzeResults/{{task_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"analyzeResults",
						"{{task_id}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://0.0.0.0:8000"
		},
		{
			"key": "test_image",
			"value": "tests/test_image.jpg",
			"type": "string"
		},
		{
			"key": "task_id",
			"value": "",
			"type": "string"
		}
	]
}